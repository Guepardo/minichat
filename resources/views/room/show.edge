@layout('layouts.app')

@section('styles')
  <style>
    .video-tiles-box {
      flex: 1
    }

    .messages-box {
      width: 300px;
      background: white;
    }

    .chat-messages-wrapper {
      flex: 1;
      max-height: -webkit-fill-available;
      overflow: auto;
    }

    .chat-input-wrapper {
      height: 60px;
    }

    .chat-input-wrapper > input {
      width: 100%;
      font-size: small;
      border-width: 1px 0;
      border-color: #f7f7f7;
    }

    .chat-input-wrapper > input:focus {
      border-width: 1px 0;
      border-color: #f7f7f7;
    }



    .chat-wrapper {
      flex: 1;
    }

    .chat-messages-wrapper b {
      font-weight: bold;
    }

    .chat-messages-wrapper p {
      font-size: small;
    }



    .action-bar-wrapper {
      height: 70px;
      background-color: white;
    }

    .action-buttom {
      border-radius: 90px;
      background-color: #f7f7f7;
      height: 45px;
      width: 45px;
      -webkit-box-shadow: 0px 0px 2px 0px rgba(0,0,0,0.75);
      -moz-box-shadow: 0px 0px 2px 0px rgba(0,0,0,0.75);
      box-shadow: 0px 0px 2px 0px rgba(0,0,0,0.75);
    }

    .action-buttom:hover {
      -webkit-box-shadow: 0px 0px 5px 0px rgba(0,0,0,0.75);
      -moz-box-shadow: 0px 0px 5px 0px rgba(0,0,0,0.75);
      box-shadow: 0px 0px 5px 0px rgba(0,0,0,0.75);
    }

    #app {
      height: 100%;
    }
  </style>
@endsection

@section('content')
  <div id="app" class="d-flex flex-column">
      <div class="d-flex chat-wrapper">
        <div class="d-flex flex-row flex-wrap video-tiles-box">
        </div>

        <div class="d-flex flex-column messages-box">
          <div class="chat-messages-wrapper p-1">
            <p v-for="message of messages">
              <b>@{{message.username}}: </b> @{{message.text}}
            </p>
          </div>
          <div class="d-flex chat-input-wrapper">
            <input type="text" v-on:keydown.enter="submitMessage" v-model="inputMessage">
          </div>
        </div>
      </div>

      <div class="d-flex justify-content-center align-items-center action-bar-wrapper">
        <div class="action-buttom m-1" v-on:click="alert('olar')">
        </div>
        <div class="action-buttom m-1" v-on:click="alert('olar')">
        </div>
        <div class="action-buttom m-1" v-on:click="alert('olar')">
        </div>
      </div>
  </div>
@endsection

@section('script')
  <script src="https://cdnjs.cloudflare.com/ajax/libs/simple-peer/9.7.2/simplepeer.min.js"> </script>
  <script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
  {{ script('js/room_controller.js') }}
  {{ script('js/display_controller.js') }}

  <script>
    const roomController = new RoomController()

    var app = new Vue({
      el: '#app',
      data: {
        messages: [],
        inputMessage: "",
        streams: []
      },

      created: function() {
        roomController.connect()
        roomController.on('data', this.addMessage)

        roomController.on('stream', (id, stream) => {
          console.log({ stream, id });
          let vid = document.createElement('video');
          vid.setAttribute('autoplay', '');
          vid.setAttribute('id', id);
          vid.setAttribute('controls', '');
          vid.volume = 1;
          document.querySelector('.video-tiles-box').appendChild(vid);
          setTimeout(() => {
            vid.srcObject = stream;
          }, 100);
        })

        roomController.on('removeStream', socketId  => {
          document.getElementById(socketId).remove()
        })

        navigator.mediaDevices.getUserMedia({
          video: false,
          audio: true
        }).then((stream) => {
          roomController.addStream(stream)
        }).catch(() => { })

        setInterval(() => {
          // roomController.broadcast('lore asdlfk jasdlfasjdlfjas df')
        }, 5000)
      },

      methods: {
        addMessage: function (username, text) {
          this.messages.push({
            username,
            text
          })
        },

        submitMessage: function() {
          if(this.inputMessage.trim() == '') {
            return
          }

          roomController.broadcast(this.inputMessage)
          this.addMessage('Self', this.inputMessage)
          this.inputMessage = ''
        }
      }
    })
  </script>
@endsection